pipeline {
    agent any
    environment {
        CONFIG_FILE = 'bankos-dr/configuration/common/s3-sync/configuration.json'
    }
    parameters {
        choice(name: 'SWITCHING_TO', choices: ['ACTIVE', 'FAILOVER'], description: 'Select the environment')
        password(name: 'AWS_ACCESS_KEY_ID', defaultValue: '', description: 'AWS_ACCESS_KEY_ID')
        password(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'AWS_SECRET_ACCESS_KEY')
        password(name: 'AWS_SESSION_TOKEN', defaultValue: '', description: 'AWS_SESSION_TOKEN')

        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Check this to run the pipeline in dry run mode')
    }
    stages {
        stage('Install Node.js and Packages') {
            steps {
                sh '''
                cd bankos-dr
                npm install
                '''
            }
        }
        
        stage('Load and Process Configuration') {
            steps {
                script {
                    env.AWS_ACCESS_KEY_ID = params.AWS_ACCESS_KEY_ID
                    env.AWS_SECRET_ACCESS_KEY = params.AWS_SECRET_ACCESS_KEY
                    env.AWS_SESSION_TOKEN = params.AWS_SESSION_TOKEN
                    env.SWITCHING_TO = params.SWITCHING_TO

                    def activeFilteredArray = []
                    def failoverFilteredArray = []

                    def clientsToProcess = ['common']

                    if (clientsToProcess.size() > 0) {
                        for (client in clientsToProcess) {
                            def command = "node bankos-dr/services/s3-sync/main.js"
                            env.CLIENT_NAME = client

                            if (params.DRY_RUN) {
                                command += ' -dr'
                            }

                            echo "Running for client: ${client}"
                            sh command
                        }
                    } else {
                        echo "No clients to process. Skipping node script execution."
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}